package strvr.slidingwindow;

//@Link  - https://leetcode.com/problems/longest-repeating-character-replacement/description/

public class LongestRepeatingCharacter {
    public static void main(String[] args) {
        String s = "AABABBA";
        System.out.println(characterReplacement(s,1));
    }

    public static int characterReplacement(String s, int k) {
        // Make an array of size 26...
        int[] charArray = new int[26];
        // Initialize largestCount, maxlen & beg pointer...
        int maxInCurrWindow = 0, start = 0, maxlen = 0;
        // Traverse all characters through the loop...
        for(int end = 0; end < s.length(); end ++){
            charArray[s.charAt(end) - 'A']++;
            // Get the largest count of a single, unique character in the current window...
            maxInCurrWindow = Math.max(maxInCurrWindow, charArray[s.charAt(end) - 'A']);
            // We are allowed to have at most k replacements in the window...
            // So, if max character frequency + distance between beg and end is greater than k...
            // this means we have considered changing more than k charactres. So time to shrink window...
            // Then there are more characters in the window than we can replace, and we need to shrink the window...
            while(end - start + 1 - maxInCurrWindow > k){     // The main equation is: end - beg + 1 - largestCount...
                charArray[s.charAt(start) - 'A']--;
                start ++;
            }
            // Get the maximum length of repeating character...
            maxlen = Math.max(maxlen, end - start + 1);     // end - beg + 1 = size of the current window...
        }
        return maxlen;      // Return the maximum length of repeating character...
    }
}
